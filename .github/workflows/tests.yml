name: tests

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

jobs:
  detect-changes:
    name: Detect code-impacting changes
    runs-on: ubuntu-latest
    outputs:
      changed: ${{ steps.filter.outputs.code }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Determine changed paths
        id: filter
        uses: dorny/paths-filter@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          filters: |
            code:
              - 'src/**'
              - 'tests/**'
              - 'scripts/**'
              - 'migrations/**'
              - 'pyproject.toml'
              - 'requirements.txt'
              - 'Makefile'
              - '.github/workflows/tests.yml'
              - 'alembic.ini'
              - 'config.toml'
              - 'Dockerfile'
              - 'docker-compose.yml'
              - '*.lock'
      - name: Report change decision
        run: |
          echo "code filter result: ${{ steps.filter.outputs.code }}" || true

  test-sqlite:
    name: Test (sqlite)
    needs: detect-changes
    if: needs.detect-changes.outputs.changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -e .

      - name: Run tests (sqlite)
        env:
          ENV: dev
          DISCORD_PUBLIC_KEY: dummy
          DATABASE_URL: sqlite+aiosqlite:///./adventorator_test.sqlite3
        run: |
          echo "Running tests for sqlite with DATABASE_URL=$DATABASE_URL"
          pytest -q

  test-postgres:
    name: Test (postgres)
    needs: detect-changes
    if: needs.detect-changes.outputs.changed == 'true'
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: adventorator
          POSTGRES_PASSWORD: adventorator
          POSTGRES_DB: adventorator
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U adventorator -d adventorator"
          --health-interval 5s
          --health-timeout 3s
          --health-retries 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -e .

      - name: Install Postgres client (for psql)
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Prepare database (postgres)
        env:
          PGPASSWORD: adventorator
          DATABASE_URL: postgresql+psycopg://adventorator:adventorator@localhost:5432/adventorator
        run: |
          psql -h localhost -U adventorator -d adventorator -c 'SELECT 1;' || true
          PYTHONPATH=./src alembic upgrade head

      - name: Run tests (postgres)
        env:
          ENV: dev
          DISCORD_PUBLIC_KEY: dummy
          DATABASE_URL: postgresql+asyncpg://adventorator:adventorator@localhost:5432/adventorator
        run: |
          echo "Running tests for postgres with DATABASE_URL=$DATABASE_URL"
          pytest -q

  code-quality-gates:
    runs-on: ubuntu-latest
    needs: [detect-changes, test-sqlite, test-postgres]
    if: needs.detect-changes.outputs.changed == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -e .
          pip install bandit pytest-cov

      - name: Run coverage with threshold
        env:
          ENV: dev
          DISCORD_PUBLIC_KEY: dummy
          DATABASE_URL: sqlite+aiosqlite:///./adventorator_cov.sqlite3
          PYTHONPATH: ./src
        run: |
          pytest --cov=Adventorator --cov-report=term-missing --cov-fail-under=80

      - name: Run targeted mutation guard
        env:
          PYTHONPATH: ./src
          ENV: dev
          DISCORD_PUBLIC_KEY: dummy
          DATABASE_URL: sqlite+aiosqlite:///./adventorator_mut.sqlite3
        run: |
          python scripts/check_mutation_guard.py

      - name: Security scan (Bandit)
        run: |
          bandit -q -r src -ll

      - name: Validate performance budgets
        run: |
          python scripts/check_performance_budgets.py

  docs-quality:
    name: Docs / Prompts / Evaluations
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -e .

      - name: Validate AI evaluation definitions
        run: |
          python scripts/run_ai_evals.py

      - name: Validate contracts only
        run: |
          python scripts/validate_prompts_and_contracts.py --only-contracts

      - name: Summarize docs-quality completion
        run: echo "Docs/prompts/evals validation completed (runs every push/PR regardless of code changes)."

  no-code-changes-note:
    name: No Code Changes Note
    needs: detect-changes
    if: needs.detect-changes.outputs.changed != 'true'
    runs-on: ubuntu-latest
    steps:
      - run: echo "Workflow concluded without running tests or code-quality gates due to no code-impacting changes."
