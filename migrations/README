Adventorator uses Alembic for schema migrations with a single database.

Quick reference
----------------

- Apply latest migrations (alias `make db-upgrade`):
	- `make alembic-up`
- Create a new migration from model changes:
	- `make alembic-rev m="describe your change"`
- Roll back one migration:
	- `make alembic-down`

Driver and DATABASE_URL
-----------------------

- Configure your database in `.env` with `DATABASE_URL`.
	- SQLite (default for dev): `sqlite+aiosqlite:///./adventorator.sqlite3`
	- Postgres (Docker Compose):
		`postgresql+asyncpg://adventorator:adventorator@db:5432/adventorator`

- Alembic needs a sync driver under the hood. Our `migrations/env.py` will:
	- Read `DATABASE_URL` from `.env` (via `python-dotenv`).
	- Convert async URLs to sync equivalents for Alembic:
		- Postgres → `postgresql+psycopg://...`
		- SQLite → `sqlite://...` (drops `+aiosqlite`)

Typical workflows
-----------------

1) Developing locally on SQLite

	 - Ensure `.env` has `DATABASE_URL=sqlite+aiosqlite:///./adventorator.sqlite3`.
	 - Run `make alembic-up` to create/update `./adventorator.sqlite3`.

2) Running with Postgres (Docker Compose)

	 - Start services: `make compose-up` (or `docker compose up -d db app`).
	 - In `.env`, set
		 `DATABASE_URL=postgresql+asyncpg://adventorator:adventorator@db:5432/adventorator`.
	 - Apply migrations from your host: `make alembic-up`.

3) Generating migrations after editing models

	 - Update `src/Adventorator/models.py`.
	 - Generate: `make alembic-rev m="add characters.index"`.
	 - Review the autogenerated script in `migrations/versions/`.
	 - Apply: `make alembic-up`.

Troubleshooting
---------------

- Module import errors during revision/upgrade
	- Ensure `PYTHONPATH=./src` is used (Makefile already sets this).

- Alembic points at the wrong database
	- Confirm `.env` is present in repo root and `DATABASE_URL` is correct.
	- `migrations/env.py` loads `.env` from project root before configuring.

- SQLite locked database errors
	- Close any running app instances that might hold a write lock.
	- Retry the migration.

CI notes
--------

The CI workflow runs `alembic upgrade head` before tests against Postgres.
Keep migrations in sync with `models.py` to avoid runtime failures.